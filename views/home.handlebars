{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <!-- make a header here -->
            <h2>New Post</h2>
            <form action="/posts" method="POST" class="new-post-form">
                <div class="form-left">
                    <!-- title input field name = "title" -->
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input type="text" id="title" name="title" required>
                    </div>
                    <!-- text area input field name = "content" -->
                    <div class="form-group">
                        <label for="content">Content</label>
                        <textarea id="content" name="content" required></textarea>
                    </div>
                    <input type="hidden" id="selected-album-data" name="album">
                    <div class="form-actions">
                        <div class="left-buttons">
                            <button type="button" class="album-search" onclick="toggleAlbumSearch()">Album</button>
                            <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                        </div>
                        <button type="submit" class="post-button right-button">Post</button>
                    </div>
                </div>
                <div class="form-right">
                    <div id="selected-album" class="selected-album"></div>
                </div>
            </form>
            <!-- album search panel -->
            <div id="album-search-container" class="album-panel" style="display:none">
                <input type="text" id="album-search-input" placeholder="Search for an artist">
                <button id="album-search-button">Search</button>
                <div id="album-results" class="album-grid"></div>
            </div>
            <!-- emoji panel -->
            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input type="text" id="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()">
                <div id="emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    {{!--  a dropdown menu at the top of the posts list on the home page, 
           to sort posts by either the number of likes or recency --}}
    <section class="sort-posts">
        <label for="sort">Sort by:</label>
        <select id="sort" onchange="location = this.value;">
            <option value="/?sort=recent" {{#if sortRecent}}selected{{/if}}>Most Recent</option>
            <option value="/?sort=likes" {{#if sortLikes}}selected{{/if}}>Most Likes</option>
        </select>
    </section>

    <section class="posts-list">
        <!-- recent posts -->
        {{#if posts.length}}
        <ul>
            {{#each posts}}
                {{> post this user=../user}}      
            {{/each}}
        </ul>
        {{else}}
            <p>No posts found. Be the first to post!</p>
        {{/if}}
    </section>
</section>

<script>
/*
 * Emoji Integration
 */

let allEmojis = [];  // Global list to hold all emojis

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    if (container.style.display === 'block' && allEmojis.length === 0) {
        fetchEmojis();
    }
}

function displayEmojis(emojis, limit=200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;
            emojiElement.style.cursor = 'pointer';
            emojiElement.style.fontSize = '24px';
            emojiElement.style.margin = '5px';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function fetchEmojis() {
    const apiKey = `{{accessToken}}`;
    const url = `https://emoji-api.com/emojis?access_key=${apiKey}`;
    fetch(url)
        .then(response => response.json())
        .then(data => {
            allEmojis = data;
            displayEmojis(allEmojis);
        })
        .catch(error => console.error('Error fetching emojis:', error));
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji =>
        emoji.unicodeName.toLowerCase().includes(searchTerm)
    );
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const textarea = document.getElementById('content');
    const startPos = textarea.selectionStart;
    const endPos = textarea.selectionEnd;
    const text = textarea.value;

    textarea.value = text.slice(0, startPos) + emoji + text.slice(endPos);
    textarea.focus();  // Keep focus on the textarea
    textarea.selectionStart = textarea.selectionEnd = startPos + emoji.length;
}

/*
 * Album Search Integration
 */

let spotifyAccessToken = '';

document.addEventListener('DOMContentLoaded', function () {
    console.log('Fetching Spotify access token...');
    fetch("https://accounts.spotify.com/api/token", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        body: `grant_type=client_credentials&client_id={{spotifyClientId}}&client_secret={{spotifyClientSecret}}`,
    })
    .then(response => response.json())
    .then(data => {
        spotifyAccessToken = data.access_token;
        console.log('Spotify access token fetched:', spotifyAccessToken);
    })
    .catch(error => console.error('Error fetching Spotify access token:', error));

    const albumSearchButton = document.getElementById('album-search-button');
    albumSearchButton.addEventListener('click', fetchAlbums);
});

function toggleAlbumSearch() {
    const container = document.getElementById('album-search-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';
}

function fetchAlbums() {
    const searchTerm = document.getElementById('album-search-input').value;
    console.log('Searching for albums with term:', searchTerm);

    fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=artist`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${spotifyAccessToken}`,
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Artist search result:', data);
        const artistId = data.artists.items[0]?.id;
        if (artistId) {
            return fetch(`https://api.spotify.com/v1/artists/${artistId}/albums?include_groups=album&market=US&limit=30`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${spotifyAccessToken}`,
                }
            });
        } else {
            throw new Error('Artist not found');
        }
    })
    .then(response => response.json())
    .then(data => {
        console.log('Albums fetched:', data);
        displayAlbums(data.items);
    })
    .catch(error => {
        console.error('Error fetching albums:', error);
        const albumResults = document.getElementById('album-results');
        albumResults.innerHTML = '<p>No albums found. Try a different search!</p>';
    });
}

function displayAlbums(albums) {
    const albumResults = document.getElementById('album-results');
    albumResults.innerHTML = '';  // Clear previous results

    if (Array.isArray(albums) && albums.length > 0) {
        albums.forEach(album => {
            const albumItem = document.createElement('div');
            albumItem.classList.add('album-item');
            albumItem.innerHTML = `
                <img src="${album.images[0].url}" alt="${album.name}">
                <h3>${album.name}</h3>
                <p>${album.artists[0].name}</p>
            `;
            albumItem.addEventListener('click', () => selectAlbum(album));
            albumResults.appendChild(albumItem);
        });
    } else {
        albumResults.innerHTML = '<p>No albums found. Try a different search!</p>';
    }
}

function selectAlbum(album) {
    const albumField = document.getElementById('selected-album');
    albumField.innerHTML = `
        <img src="${album.images[0].url}" alt="${album.name}">
        <h3>${album.name}</h3>
        <p>${album.artists[0].name}</p>
    `;

    // Save the selected album data in the hidden input field
    const selectedAlbumData = document.getElementById('selected-album-data');
    selectedAlbumData.value = JSON.stringify(album);
}
</script>
